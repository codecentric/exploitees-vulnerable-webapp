terraform {
  required_providers {
    name = {
      source  = "hashicorp/aws"
      version = "4.14.0"
    }
  }
}

provider "aws" {
  region = local.region
}

# variable "domain_name" {
#   type = string
# }

variable "vpc_cidr_block" {
  type    = string
  default = "10.201.0.0/16"
}

variable "webgoat_version" {
  type    = string
  default = "8.2.2"
}

locals {
  region               = "eu-central-1"
  codecentric_vpn_cidr = "87.191.39.154/32"
}

resource "aws_instance" "webgoat" {
  ami                    = "ami-09439f09c55136ecf" # Amazon Linux 2
  instance_type          = "t2.micro"
  vpc_security_group_ids = [aws_security_group.allow_http_8080.id]
  subnet_id              = module.vpc.public_subnets[0]
  user_data              = <<-EOT
    #!/bin/bash
    sudo yum install java-17-amazon-corretto-headless -y
    wget -O /tmp/webgoat.jar "https://github.com/WebGoat/WebGoat/releases/download/v${var.webgoat_version}/webgoat-server-${var.webgoat_version}.jar"
    java -Dfile.encoding=UTF-8 -Dserver.port=8080 -Dserver.address=0.0.0.0 -jar /tmp/webgoat.jar
    EOT
}

module "vpc" {
  source = "terraform-aws-modules/vpc/aws"

  name = "webgoat"
  cidr = var.vpc_cidr_block

  azs            = [for suffix in ["a", "b", "c"] : "${local.region}${suffix}"]
  public_subnets = cidrsubnets("10.201.0.0/16", 8, 8, 8)

  enable_nat_gateway = false
  enable_vpn_gateway = false

  vpc_tags = {
    Name = "webgoat"
  }
}

resource "aws_security_group" "allow_http_8080" {
  name        = "allow_http_8080"
  description = "Allow inbound HTTP traffic on 8080"
  vpc_id      = module.vpc.vpc_id

  ingress {
    description = "HTTP 8080 on VPN"
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    # TODO use ALB for cidr_blocks = ["0.0.0.0/0"]
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }
}

resource "aws_security_group" "allow_tls_on_vpn" {
  name        = "allow_tls_on_vpn"
  description = "Allow inbound HTTPS traffic when on codecentric VPN"
  vpc_id      = module.vpc.vpc_id

  ingress {
    description = "HTTPS on VPN"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["${local.codecentric_vpn_cidr}"]
  }

  ingress {
    description = "TODO: Remove when TLS works: HTTP on VPN"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["${local.codecentric_vpn_cidr}"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }
}

resource "aws_s3_bucket" "webgoat-alb-logs" {
  bucket = "webgoat-alb-logs"
}

resource "aws_s3_bucket_acl" "webgoat-alb-logs-acl" {
  bucket = aws_s3_bucket.webgoat-alb-logs.id
  acl    = "private"
}

module "alb" {
  source  = "terraform-aws-modules/alb/aws"
  version = "6.10.0"

  name = "webgoat-alb"

  load_balancer_type = "application"

  vpc_id          = module.vpc.vpc_id
  subnets         = module.vpc.public_subnets
  security_groups = [aws_security_group.allow_tls_on_vpn.id]

  # access_logs = {
  #   bucket = aws_s3_bucket.webgoat-alb-logs.id
  # }

  target_groups = [
    {
      name_prefix      = "goat-"
      backend_protocol = "HTTP"
      backend_port     = 8080
      target_type      = "instance"
      targets = [
        {
          target_id = aws_instance.webgoat.id
          port      = 8080
        }
      ]
      health_check = {
        enabled             = true
        interval            = 30
        path                = "/WebGoat/login"
        port                = "traffic-port"
        healthy_threshold   = 2
        unhealthy_threshold = 3
        timeout             = 6
        protocol            = "HTTP"
        matcher             = "200"
      }
    }
  ]

  # https_listeners = [
  #   {
  #     port               = 443
  #     protocol           = "HTTPS"
  #     certificate_arn    = "arn:aws:iam::123456789012:server-certificate/test_cert-123456789012"
  #     target_group_index = 0
  #   }
  # ]

  http_tcp_listeners = [
    {
      port               = 80
      protocol           = "HTTP"
      target_group_index = 0
    }
  ]
}

data "aws_elb_service_account" "main" {}

data "aws_iam_policy_document" "s3_lb_write" {
  policy_id = "s3_lb_write"

  statement {
    actions = [
      "s3:PutObject",
      "s3:GetBucketAcl"
    ]

    resources = ["arn:aws:s3:::webgoat-alb-logs/logs/*"]

    principals {
      identifiers = ["${data.aws_elb_service_account.main.arn}"]
      type        = "AWS"
    }
  }
}
