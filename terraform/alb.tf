module "alb" {
  count   = (var.webgoat_enabled) ? 1 : 0
  source  = "terraform-aws-modules/alb/aws"
  version = "6.10.0"

  name = "webgoat-alb"

  load_balancer_type = "application"

  vpc_id  = module.webgoat-vpc[0].vpc_id
  subnets = module.webgoat-vpc[0].public_subnets
  security_groups = [aws_security_group.alb[0].id]

  # access_logs = {
  #   bucket = aws_s3_bucket.webgoat-alb-logs.id
  # }

  target_groups = [
    {
      name_prefix      = "goat-"
      backend_protocol = "HTTP"
      backend_port     = 8080
      target_type      = "instance"
      targets = [
        {
          target_id = aws_instance.webgoat[0].id
          port      = 8080
        }
      ]
      health_check = {
        enabled             = true
        interval            = 30
        path                = "/WebGoat/login"
        port                = "traffic-port"
        healthy_threshold   = 2
        unhealthy_threshold = 3
        timeout             = 6
        protocol            = "HTTP"
        matcher             = "200"
      }
    }
  ]

  https_listeners = var.route53_zone_name == "" ? [] : [
    {
      port               = 443
      protocol           = "HTTPS"
      certificate_arn    = module.dns-tls[0].certificate_arn
      target_group_index = 0
    }
  ]

  http_tcp_listeners = var.route53_zone_name != "" ? [] : [
    {
      port               = 80
      protocol           = "HTTP"
      target_group_index = 0
    }
  ]
}

resource "aws_security_group" "alb" {
  count  = (var.webgoat_enabled) ? 1 : 0
  name   = "webgoat-alb"
  vpc_id = module.webgoat-vpc[0].vpc_id

  ingress {
    description = (var.restrict_to_cidr != "") ? "HTTPS from restricted cidr only" : "HTTPS from anywhere"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = [(var.restrict_to_cidr != "") ? var.restrict_to_cidr : "0.0.0.0/0"]
  }

  egress {
    from_port = 0
    to_port   = 0
    protocol  = "-1"
    cidr_blocks = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }
}

resource "aws_s3_bucket" "webgoat-alb-logs" {
  bucket = "webgoat-alb-logs"
}

resource "aws_s3_bucket_ownership_controls" "webgoat-alb-logs" {
  bucket = aws_s3_bucket.webgoat-alb-logs.id
  rule {
    object_ownership = "BucketOwnerEnforced"
  }
}

data "aws_elb_service_account" "main" {}

data "aws_iam_policy_document" "s3_lb_write" {
  policy_id = "s3_lb_write"

  statement {
    actions = [
      "s3:PutObject",
      "s3:GetBucketAcl"
    ]

    resources = ["arn:aws:s3:::webgoat-alb-logs/logs/*"]

    principals {
      identifiers = [data.aws_elb_service_account.main.arn]
      type = "AWS"
    }
  }
}
