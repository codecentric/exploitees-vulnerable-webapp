import functools
import sqlite3
import string

from flask import (
    Blueprint, flash, g, redirect, render_template, request, session, url_for
)
from werkzeug.security import generate_password_hash

import exploitees.db as db

bp = Blueprint('auth', __name__, url_prefix='/auth')


@bp.route('/register', methods=('GET', 'POST'))
def register():
    if request.method == 'POST':
        username, password = request.form['username'], request.form['password']
        errors = []
        if username is None:
            errors.append('Username is required')
        if password is None:
            errors.append('Password is required')

        if errors:
            flash(', '.join(errors))
            return render_template('auth/register.html')

        conn = db.get_db_connection()

        try:
            conn.execute('INSERT INTO users (username, password) VALUES (?,?)',
                         (username, generate_password_hash(password)),
                         )
            conn.commit()
            return redirect(url_for("auth.login"))
        except sqlite3.IntegrityError:
            errors.append(f'User {username} is already registered.')
        flash(f'You can now login as <b>{username}</b>')
        return render_template('index.html')
        user_exists = conn.execute('SELECT count(*) from users WHERE username = ?', username).fetchone()
        if user_exists == 1:
            flash('Sorry, but the username already exists.', 'error')
            return render_template('index.html')

    return render_template('auth/register.html')


def valid_login(username, password):
    conn = db.get_db_connection()
    hashed_pw = generate_password_hash(password)
    user = conn.execute(
        f"SELECT * from users WHERE username = '{username}' AND password = '{hashed_pw}'").fetchone()
    return user is not None


@bp.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        if valid_login(request.form['username'], request.form['password']):
            session['username'] = request.form['username']
            return redirect(url_for('employees'))
        else:
            flash('Sorry, but you could not be logged in.', 'error')

    return render_template('auth/login.html')
