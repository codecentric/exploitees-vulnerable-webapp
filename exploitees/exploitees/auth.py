import hashlib
import sqlite3

from flask import (
    Blueprint, flash, redirect, render_template, request, session, url_for
)

import exploitees.db as db

bp = Blueprint('auth', __name__, url_prefix='/auth')


@bp.route('/register', methods=('GET', 'POST'))
def register():
    if request.method == 'POST':
        username, password = request.form['username'], request.form['password']
        errors = []
        if not username:
            errors.append('Username is required')
        if not password:
            errors.append('Password is required')

        if errors:
            flash(', '.join(errors), 'error')
            return render_template('auth/register.html')

        conn = db.get_db_connection()

        try:
            conn.execute('INSERT INTO users (username, password_hash) VALUES (?,?)',
                         (username, hashlib.md5(password.encode('UTF-8')).hexdigest()))
            conn.commit()
            flash(f'You may now login as {username}')
            return redirect(url_for('index'))
        except sqlite3.IntegrityError:
            flash(f'User {username} is already registered.', 'error')
            return render_template('auth/register.html')

    return render_template('auth/register.html')


def valid_login(username, password):
    conn = db.get_db_connection()
    hashed_pw = hashlib.md5(password.encode('UTF-8')).hexdigest()
    user = conn.execute(
        f"SELECT * from users WHERE username = '{username}' AND password_hash = '{hashed_pw}'").fetchone()
    return user is not None


@bp.route('/login', methods=['POST'])
def login():
    if valid_login(request.form['username'], request.form['password']):
        session['username'] = request.form['username']
        return redirect(url_for('exploitees.employees'))
    else:
        flash('Sorry, but you could not be logged in.', 'error')


@bp.route('/logout')
def logout():
    session['username'] = None
    flash('You are now logged out again')
    return render_template('index.html')